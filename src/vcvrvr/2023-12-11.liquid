---
title: the library
page_title: "the library [gtnoblg/vcvrvr]"
date: 2023-12-11

truncate: true
preview_text: "One of the final key components needed to have a meaningful experience with this thing is a way to load new modules into the patch: the library!"
preview_img_src: src/img/vcvrvr/Screenshot_20231211_114007_381.png
preview_img_alt: ""
---
<p>One of the final key components needed to have a meaningful experience with this thing is a way to load new modules into the patch: the library!</p>
{% image "src/img/vcvrvr/rack-library.png", "" %}
<p class="caption">The library in Rack itself.</p>
<p>This turned out to be one of the more straightforward features to implement. The trickiest part was probably figuring out how to dump the library data from Rack, given that it is not considered part of the API and is therefore undocumented. I&rsquo;d be more concerned about that if I wasn&rsquo;t already <a href="/vcvrvr/2023-08-11/">locked into</a> distributing a custom build of Rack&mdash;I don&rsquo;t need to be worried about breaking changes catching me off guard.</p>
<p>I had been digging around off and on trying to get at the library data (ie, which plugins are installed and what modules they provide), and one day I stumbled upon a forum post mentioning exactly where to find it. From there it was a simple matter of looking at what happens when you click on a library entry in Rack to see how Rack itself spawns a module. I quickly had the fundamentals implemented&mdash;I could send a plugin slug and model slug (the required, unique, unchanging strings used to identify a given plugin and each of its modules) from Unreal to Rack, then have Rack spawn the module and send the info about it back to Unreal.</p>
<p>Now I needed to get all the library data over to Unreal. This includes the aforementioned slugs as well as the human-readable names, a list of available tags, the module descriptions and what tags they&rsquo;re tagged with, and some additional metadata like favorites and usage statistics. I was initially sending this data in chunks with OSC the same as the rest of the data. However, this proved to be a lot of data to process that way which led to some hitches as it was loaded. In the end, I decided to dump all the library data into a single JSON file and then send a message to Unreal with the file&rsquo;s path once it was created, resulting in a much quicker parse and near-instant-feeling load on the Unreal side.</p>
<p>The last step, then, is building out an actor with an attached widget to display all the library information and handle the UI for selecting, sorting, filtering, and favoriting. I had done some basic work with Unreal widgets for the tooltip widget, but this was a much more complex UI to tackle. The Unreal widget system, <a href="https://docs.unrealengine.com/5.0/en-US/getting-started-with-umg-for-unreal-engine/" target="_blank">UMG</a>, is weird! I&rsquo;m not sure what it is based on if anything, but it is unlike anything I have seen before. And, as usual with Unreal, the documentation leaves some things to be desired.</p>
<p>That said, I am a guy who has done <em>a lot</em> of front-end work on the web, and if I can make CSS do what I want it to, then how hard can UMG be? There was a lot of trial and error, and I found a lot of excellent advice and tutorials from <a href="https://benui.ca/unreal/ui-introduction/" target="_blank">Ben UI</a>. In the end, it wasn&rsquo;t that bad and I even came to appreciate some aspects of it.</p>
{% image preview_img_src, preview_img_alt %}
<p class="caption">Along the way, I figured out how to take screenshots directly from Unreal. It&rsquo;s nice to have the full render sometimes and not just the cropped, single-eye version I&rsquo;ve been screenshotting up to now.</p>
<p>So we now have <em>near</em> parity with the features of the library in Rack. It is currently missing sorting, type-to-search, and preview images. Sorting should be pretty easy but might require a little more data collecting. Type-to-search is going to require a VR keyboard widget, and that&rsquo;s a whole other thing, but I&rsquo;m going to need it for file handling, at least, so it&rsquo;ll be coming eventually. Preview images were made a lot more possible once I noticed that there&rsquo;s a command line flag for generating screenshots of every installed module, which will come in handy. Coming Soon&#8482; I guess!</p>
